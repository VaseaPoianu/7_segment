
7_segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000040e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000040e  000004a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080006a  0080006a  000004ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093a  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000062c  00000000  00000000  00000e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003bd  00000000  00000000  000014b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036a  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003aa  00000000  00000000  00001c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b3 01 	call	0x366	; 0x366 <main>
  8a:	0c 94 05 02 	jmp	0x40a	; 0x40a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
	((1<<DA) | (1<<DB) | (1<<DC) | (1<<DD) | (1<<DE) | (1<<DF) | (1<<DG)),	//8
	((1<<DA) | (1<<DB) | (1<<DC) | (1<<DD) | (1<<DF) | (1<<DG)),			//9
};


ISR(INT0_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	count_flag = ~count_flag;
  9e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  a2:	80 95       	com	r24
  a4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
}
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <__vector_2>:

ISR(INT1_vect){
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
	cnt = 0;
  c4:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <cnt+0x1>
  c8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <cnt>
	count_flag = 0;
  cc:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
	PORTD =( 1<< D4); // DIG 4
  d0:	80 e8       	ldi	r24, 0x80	; 128
  d2:	82 bb       	out	0x12, r24	; 18
	PORTC = ~digit[0];
  d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d8:	80 95       	com	r24
  da:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	80 e7       	ldi	r24, 0x70	; 112
  e0:	92 e0       	ldi	r25, 0x02	; 2
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <__vector_2+0x2e>
  ea:	00 c0       	rjmp	.+0      	; 0xec <__vector_2+0x38>
  ec:	00 00       	nop
	_delay_ms(mini_delay);
}
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	2f 91       	pop	r18
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <counting>:

void counting(void){
	if (cnt<=9)
  fe:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <cnt>
 102:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <cnt+0x1>
 106:	8a 30       	cpi	r24, 0x0A	; 10
 108:	91 05       	cpc	r25, r1
 10a:	d4 f4       	brge	.+52     	; 0x140 <counting+0x42>
	{
		PORTD =( 1<<D4); // DIG 4
 10c:	80 e8       	ldi	r24, 0x80	; 128
 10e:	82 bb       	out	0x12, r24	; 18
		PORTC = ~digit[cnt%10];
 110:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <cnt>
 114:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <cnt+0x1>
 118:	6a e0       	ldi	r22, 0x0A	; 10
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__divmodhi4>
 120:	fc 01       	movw	r30, r24
 122:	e0 5a       	subi	r30, 0xA0	; 160
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	80 81       	ld	r24, Z
 128:	80 95       	com	r24
 12a:	85 bb       	out	0x15, r24	; 21
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	40 e7       	ldi	r20, 0x70	; 112
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	21 50       	subi	r18, 0x01	; 1
 134:	40 40       	sbci	r20, 0x00	; 0
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <counting+0x34>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <counting+0x3e>
 13c:	00 00       	nop
 13e:	08 95       	ret
		_delay_ms(mini_delay);
	}
	
	else if ((cnt>9) && (cnt<99))
 140:	9c 01       	movw	r18, r24
 142:	2a 50       	subi	r18, 0x0A	; 10
 144:	31 09       	sbc	r19, r1
 146:	29 35       	cpi	r18, 0x59	; 89
 148:	31 05       	cpc	r19, r1
 14a:	98 f5       	brcc	.+102    	; 0x1b2 <counting+0xb4>
	{
		PORTD =( 1<<D4); // DIG 4
 14c:	80 e8       	ldi	r24, 0x80	; 128
 14e:	82 bb       	out	0x12, r24	; 18
		PORTC = ~digit[cnt%10];
 150:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <cnt>
 154:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <cnt+0x1>
 158:	2a e0       	ldi	r18, 0x0A	; 10
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	b9 01       	movw	r22, r18
 15e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__divmodhi4>
 162:	fc 01       	movw	r30, r24
 164:	e0 5a       	subi	r30, 0xA0	; 160
 166:	ff 4f       	sbci	r31, 0xFF	; 255
 168:	80 81       	ld	r24, Z
 16a:	80 95       	com	r24
 16c:	85 bb       	out	0x15, r24	; 21
 16e:	9f ef       	ldi	r25, 0xFF	; 255
 170:	40 e7       	ldi	r20, 0x70	; 112
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	91 50       	subi	r25, 0x01	; 1
 176:	40 40       	sbci	r20, 0x00	; 0
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <counting+0x76>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <counting+0x80>
 17e:	00 00       	nop
		_delay_ms(mini_delay);
		
		PORTD =( 1<<D3); // DIG 3
 180:	80 e4       	ldi	r24, 0x40	; 64
 182:	82 bb       	out	0x12, r24	; 18
		PORTC = ~digit[cnt/10];	
 184:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <cnt>
 188:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <cnt+0x1>
 18c:	b9 01       	movw	r22, r18
 18e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__divmodhi4>
 192:	fb 01       	movw	r30, r22
 194:	e0 5a       	subi	r30, 0xA0	; 160
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	80 81       	ld	r24, Z
 19a:	80 95       	com	r24
 19c:	85 bb       	out	0x15, r24	; 21
 19e:	9f ef       	ldi	r25, 0xFF	; 255
 1a0:	20 e7       	ldi	r18, 0x70	; 112
 1a2:	42 e0       	ldi	r20, 0x02	; 2
 1a4:	91 50       	subi	r25, 0x01	; 1
 1a6:	20 40       	sbci	r18, 0x00	; 0
 1a8:	40 40       	sbci	r20, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <counting+0xa6>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <counting+0xb0>
 1ae:	00 00       	nop
 1b0:	08 95       	ret
		_delay_ms(mini_delay);
	}
			
	else if ((cnt>99) && (cnt<999))
 1b2:	9c 01       	movw	r18, r24
 1b4:	24 56       	subi	r18, 0x64	; 100
 1b6:	31 09       	sbc	r19, r1
 1b8:	23 38       	cpi	r18, 0x83	; 131
 1ba:	33 40       	sbci	r19, 0x03	; 3
 1bc:	08 f0       	brcs	.+2      	; 0x1c0 <counting+0xc2>
 1be:	56 c0       	rjmp	.+172    	; 0x26c <counting+0x16e>
	{
		PORTD =( 1<<D4); // DIG 4
 1c0:	80 e8       	ldi	r24, 0x80	; 128
 1c2:	82 bb       	out	0x12, r24	; 18
		PORTC = ~digit[cnt%10];
 1c4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <cnt>
 1c8:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <cnt+0x1>
 1cc:	2a e0       	ldi	r18, 0x0A	; 10
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	b9 01       	movw	r22, r18
 1d2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__divmodhi4>
 1d6:	fc 01       	movw	r30, r24
 1d8:	e0 5a       	subi	r30, 0xA0	; 160
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	80 81       	ld	r24, Z
 1de:	80 95       	com	r24
 1e0:	85 bb       	out	0x15, r24	; 21
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	90 e7       	ldi	r25, 0x70	; 112
 1e6:	42 e0       	ldi	r20, 0x02	; 2
 1e8:	81 50       	subi	r24, 0x01	; 1
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	40 40       	sbci	r20, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <counting+0xea>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <counting+0xf4>
 1f2:	00 00       	nop
		_delay_ms(mini_delay);
				
		cnt1 = cnt/10;
 1f4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <cnt>
 1f8:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <cnt+0x1>
 1fc:	b9 01       	movw	r22, r18
 1fe:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__divmodhi4>
 202:	70 93 6e 00 	sts	0x006E, r23	; 0x80006e <cnt1+0x1>
 206:	60 93 6d 00 	sts	0x006D, r22	; 0x80006d <cnt1>
			
		PORTD =( 1<<D3); // DIG 3
 20a:	80 e4       	ldi	r24, 0x40	; 64
 20c:	82 bb       	out	0x12, r24	; 18
		PORTC = ~digit[cnt1%10];
 20e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <cnt1>
 212:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <cnt1+0x1>
 216:	b9 01       	movw	r22, r18
 218:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__divmodhi4>
 21c:	fc 01       	movw	r30, r24
 21e:	e0 5a       	subi	r30, 0xA0	; 160
 220:	ff 4f       	sbci	r31, 0xFF	; 255
 222:	80 81       	ld	r24, Z
 224:	80 95       	com	r24
 226:	85 bb       	out	0x15, r24	; 21
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	90 e7       	ldi	r25, 0x70	; 112
 22c:	42 e0       	ldi	r20, 0x02	; 2
 22e:	81 50       	subi	r24, 0x01	; 1
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	40 40       	sbci	r20, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <counting+0x130>
 236:	00 c0       	rjmp	.+0      	; 0x238 <counting+0x13a>
 238:	00 00       	nop
		_delay_ms(mini_delay);
			
		PORTD = (1<<D2); // DIG 2
 23a:	80 e2       	ldi	r24, 0x20	; 32
 23c:	82 bb       	out	0x12, r24	; 18
		PORTC = ~digit[cnt1/10];
 23e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <cnt1>
 242:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <cnt1+0x1>
 246:	b9 01       	movw	r22, r18
 248:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__divmodhi4>
 24c:	fb 01       	movw	r30, r22
 24e:	e0 5a       	subi	r30, 0xA0	; 160
 250:	ff 4f       	sbci	r31, 0xFF	; 255
 252:	80 81       	ld	r24, Z
 254:	80 95       	com	r24
 256:	85 bb       	out	0x15, r24	; 21
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	90 e7       	ldi	r25, 0x70	; 112
 25c:	22 e0       	ldi	r18, 0x02	; 2
 25e:	81 50       	subi	r24, 0x01	; 1
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	20 40       	sbci	r18, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <counting+0x160>
 266:	00 c0       	rjmp	.+0      	; 0x268 <counting+0x16a>
 268:	00 00       	nop
 26a:	08 95       	ret
		_delay_ms(mini_delay);
	}
			
	else if (cnt>999)
 26c:	88 3e       	cpi	r24, 0xE8	; 232
 26e:	93 40       	sbci	r25, 0x03	; 3
 270:	0c f4       	brge	.+2      	; 0x274 <counting+0x176>
 272:	78 c0       	rjmp	.+240    	; 0x364 <counting+0x266>
	{
		PORTD = (1<<D4); // DIG 4
 274:	80 e8       	ldi	r24, 0x80	; 128
 276:	82 bb       	out	0x12, r24	; 18
		PORTC = ~digit[cnt%10];
 278:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <cnt>
 27c:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <cnt+0x1>
 280:	2a e0       	ldi	r18, 0x0A	; 10
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	b9 01       	movw	r22, r18
 286:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__divmodhi4>
 28a:	fc 01       	movw	r30, r24
 28c:	e0 5a       	subi	r30, 0xA0	; 160
 28e:	ff 4f       	sbci	r31, 0xFF	; 255
 290:	80 81       	ld	r24, Z
 292:	80 95       	com	r24
 294:	85 bb       	out	0x15, r24	; 21
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	90 e7       	ldi	r25, 0x70	; 112
 29a:	42 e0       	ldi	r20, 0x02	; 2
 29c:	81 50       	subi	r24, 0x01	; 1
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	40 40       	sbci	r20, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <counting+0x19e>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <counting+0x1a8>
 2a6:	00 00       	nop
		_delay_ms(mini_delay);
				
		cnt1 = cnt/10;
 2a8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <cnt>
 2ac:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <cnt+0x1>
 2b0:	b9 01       	movw	r22, r18
 2b2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__divmodhi4>
 2b6:	70 93 6e 00 	sts	0x006E, r23	; 0x80006e <cnt1+0x1>
 2ba:	60 93 6d 00 	sts	0x006D, r22	; 0x80006d <cnt1>
		
		PORTD = (1<<D3); // DIG 3
 2be:	80 e4       	ldi	r24, 0x40	; 64
 2c0:	82 bb       	out	0x12, r24	; 18
		PORTC = ~digit[cnt1%10];
 2c2:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <cnt1>
 2c6:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <cnt1+0x1>
 2ca:	b9 01       	movw	r22, r18
 2cc:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__divmodhi4>
 2d0:	fc 01       	movw	r30, r24
 2d2:	e0 5a       	subi	r30, 0xA0	; 160
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	80 81       	ld	r24, Z
 2d8:	80 95       	com	r24
 2da:	85 bb       	out	0x15, r24	; 21
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	90 e7       	ldi	r25, 0x70	; 112
 2e0:	42 e0       	ldi	r20, 0x02	; 2
 2e2:	81 50       	subi	r24, 0x01	; 1
 2e4:	90 40       	sbci	r25, 0x00	; 0
 2e6:	40 40       	sbci	r20, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <counting+0x1e4>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <counting+0x1ee>
 2ec:	00 00       	nop
		_delay_ms(mini_delay);
				
		cnt2 = cnt1/10;
 2ee:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <cnt1>
 2f2:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <cnt1+0x1>
 2f6:	b9 01       	movw	r22, r18
 2f8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__divmodhi4>
 2fc:	70 93 6c 00 	sts	0x006C, r23	; 0x80006c <cnt2+0x1>
 300:	60 93 6b 00 	sts	0x006B, r22	; 0x80006b <cnt2>
		
		PORTD = (1<<D2); // DIG 2
 304:	80 e2       	ldi	r24, 0x20	; 32
 306:	82 bb       	out	0x12, r24	; 18
		PORTC = ~digit[cnt2%10];
 308:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <cnt2>
 30c:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <cnt2+0x1>
 310:	b9 01       	movw	r22, r18
 312:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__divmodhi4>
 316:	fc 01       	movw	r30, r24
 318:	e0 5a       	subi	r30, 0xA0	; 160
 31a:	ff 4f       	sbci	r31, 0xFF	; 255
 31c:	80 81       	ld	r24, Z
 31e:	80 95       	com	r24
 320:	85 bb       	out	0x15, r24	; 21
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	90 e7       	ldi	r25, 0x70	; 112
 326:	42 e0       	ldi	r20, 0x02	; 2
 328:	81 50       	subi	r24, 0x01	; 1
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	40 40       	sbci	r20, 0x00	; 0
 32e:	e1 f7       	brne	.-8      	; 0x328 <counting+0x22a>
 330:	00 c0       	rjmp	.+0      	; 0x332 <counting+0x234>
 332:	00 00       	nop
		_delay_ms(mini_delay);
		
		PORTD = (1<<D1); // DIG 1
 334:	80 e1       	ldi	r24, 0x10	; 16
 336:	82 bb       	out	0x12, r24	; 18
		PORTC = ~digit[cnt2/10];
 338:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <cnt2>
 33c:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <cnt2+0x1>
 340:	b9 01       	movw	r22, r18
 342:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__divmodhi4>
 346:	fb 01       	movw	r30, r22
 348:	e0 5a       	subi	r30, 0xA0	; 160
 34a:	ff 4f       	sbci	r31, 0xFF	; 255
 34c:	80 81       	ld	r24, Z
 34e:	80 95       	com	r24
 350:	85 bb       	out	0x15, r24	; 21
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	90 e7       	ldi	r25, 0x70	; 112
 356:	22 e0       	ldi	r18, 0x02	; 2
 358:	81 50       	subi	r24, 0x01	; 1
 35a:	90 40       	sbci	r25, 0x00	; 0
 35c:	20 40       	sbci	r18, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <counting+0x25a>
 360:	00 c0       	rjmp	.+0      	; 0x362 <counting+0x264>
 362:	00 00       	nop
 364:	08 95       	ret

00000366 <main>:

}


int main(void){
	DDRA = (1<<5);
 366:	80 e2       	ldi	r24, 0x20	; 32
 368:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xF0;
 36e:	80 ef       	ldi	r24, 0xF0	; 240
 370:	81 bb       	out	0x11, r24	; 17
	
	
	MCUCR = 0x0F;
 372:	8f e0       	ldi	r24, 0x0F	; 15
 374:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
 376:	80 ec       	ldi	r24, 0xC0	; 192
 378:	8b bf       	out	0x3b, r24	; 59
	sei();
 37a:	78 94       	sei
	while (1){

		/*Afisarea ciclica*/
		

	counting();
 37c:	0e 94 7f 00 	call	0xfe	; 0xfe <counting>
	if(count_flag) {
 380:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 384:	88 23       	and	r24, r24
 386:	91 f0       	breq	.+36     	; 0x3ac <main+0x46>
		cnt++;
 388:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <cnt>
 38c:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <cnt+0x1>
 390:	01 96       	adiw	r24, 0x01	; 1

		if (cnt>9999) cnt=0;
 392:	80 31       	cpi	r24, 0x10	; 16
 394:	27 e2       	ldi	r18, 0x27	; 39
 396:	92 07       	cpc	r25, r18
 398:	2c f4       	brge	.+10     	; 0x3a4 <main+0x3e>
		/*Afisarea ciclica*/
		

	counting();
	if(count_flag) {
		cnt++;
 39a:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <cnt+0x1>
 39e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <cnt>
 3a2:	04 c0       	rjmp	.+8      	; 0x3ac <main+0x46>

		if (cnt>9999) cnt=0;
 3a4:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <cnt+0x1>
 3a8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <cnt>
 3ac:	8f e1       	ldi	r24, 0x1F	; 31
 3ae:	9e e4       	ldi	r25, 0x4E	; 78
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <main+0x4a>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <main+0x50>
 3b6:	00 00       	nop
 3b8:	e1 cf       	rjmp	.-62     	; 0x37c <main+0x16>

000003ba <__divmodhi4>:
 3ba:	97 fb       	bst	r25, 7
 3bc:	07 2e       	mov	r0, r23
 3be:	16 f4       	brtc	.+4      	; 0x3c4 <__divmodhi4+0xa>
 3c0:	00 94       	com	r0
 3c2:	07 d0       	rcall	.+14     	; 0x3d2 <__divmodhi4_neg1>
 3c4:	77 fd       	sbrc	r23, 7
 3c6:	09 d0       	rcall	.+18     	; 0x3da <__divmodhi4_neg2>
 3c8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__udivmodhi4>
 3cc:	07 fc       	sbrc	r0, 7
 3ce:	05 d0       	rcall	.+10     	; 0x3da <__divmodhi4_neg2>
 3d0:	3e f4       	brtc	.+14     	; 0x3e0 <__divmodhi4_exit>

000003d2 <__divmodhi4_neg1>:
 3d2:	90 95       	com	r25
 3d4:	81 95       	neg	r24
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
 3d8:	08 95       	ret

000003da <__divmodhi4_neg2>:
 3da:	70 95       	com	r23
 3dc:	61 95       	neg	r22
 3de:	7f 4f       	sbci	r23, 0xFF	; 255

000003e0 <__divmodhi4_exit>:
 3e0:	08 95       	ret

000003e2 <__udivmodhi4>:
 3e2:	aa 1b       	sub	r26, r26
 3e4:	bb 1b       	sub	r27, r27
 3e6:	51 e1       	ldi	r21, 0x11	; 17
 3e8:	07 c0       	rjmp	.+14     	; 0x3f8 <__udivmodhi4_ep>

000003ea <__udivmodhi4_loop>:
 3ea:	aa 1f       	adc	r26, r26
 3ec:	bb 1f       	adc	r27, r27
 3ee:	a6 17       	cp	r26, r22
 3f0:	b7 07       	cpc	r27, r23
 3f2:	10 f0       	brcs	.+4      	; 0x3f8 <__udivmodhi4_ep>
 3f4:	a6 1b       	sub	r26, r22
 3f6:	b7 0b       	sbc	r27, r23

000003f8 <__udivmodhi4_ep>:
 3f8:	88 1f       	adc	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	5a 95       	dec	r21
 3fe:	a9 f7       	brne	.-22     	; 0x3ea <__udivmodhi4_loop>
 400:	80 95       	com	r24
 402:	90 95       	com	r25
 404:	bc 01       	movw	r22, r24
 406:	cd 01       	movw	r24, r26
 408:	08 95       	ret

0000040a <_exit>:
 40a:	f8 94       	cli

0000040c <__stop_program>:
 40c:	ff cf       	rjmp	.-2      	; 0x40c <__stop_program>
